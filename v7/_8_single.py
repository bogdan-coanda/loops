from diagram import *
from uicanvas import *
from common import *
from measurement import *
from itertools import chain
from time import time
from collections import defaultdict
from random import *


if __name__ == "__main__":

	# x120
	# S = '1033324 0011257 0121030 0032507 0001214 1123251 0010027 0113234 0032417 0224542 0023047 0134002 0113116 0001337 0033337 0014127 0134243 0010462 0001057 0032056 0011117 0023147 0024305 0023240 0001407 0113023 0002007 0121554 0010433 0010207 0113153 0224220 0224241 0023417 0224130 0224502 0224511 1033333 0034251 0002247 0002157 0002337 0034260 0002547 0014227 0011007 0023263 0122547 0024314 0131246 0024504 0011467 0011554 0033022 0032237 0033226 0033251 0033263 0010135 0023225 0001563 0010502 0020060 0020051 0024437 0024513 0024532 0024540 1033315 0033120 0112247 0113144 0121106 0121005 1123201 0002421 0032157 0121130 0121153 0121115 0134234 0002464 0121465 0033030 0010357 0024127 0034314 0134314 0001143 0010153 0112445 0131365 0112547 0123014 0010110 0023234 0010444 0010144 0011502 0014014 0033516 0112325 1123112 0131212 0134435 0121221 0112027 0001507 0023216 0023527 0024037 0024261 0024563 0032065 0001100 0001134 0034031 0113212 0034041 0121367'.split(' ')
	
	# ⇒94
	# S = '0011257 0121030 0001214 0010027 0113234 0032417 0224542 0023047 0134002 0113116 0001337 0033337 0014127 0134243 0010462 0001057 0032056 0011117 0023147 0024305 0023240 0001407 0002007 0010433 0010207 0113153 0224241 0023417 0224130 0224502 0034251 0002247 0002157 0002337 0034260 0002547 0014227 0011007 0023263 0122547 0131246 0024504 0011467 0011554 0033022 0032237 0033263 0010135 0023225 0001563 0010502 0020060 0020051 0024437 0024540 0033120 0112247 0113144 0121106 0121005 1123201 0002421 0032157 0121115 0134234 0002464 0033030 0010357 0134314 0001143 0010153 0112445 0112547 0010110 0010444 0010144 0011502 0014014 0033516 0112325 1123112 0131212 0134435 0112027 0001507 0023216 0023527 0024037 0024261 0024563 0032065 0001100 0001134 0113212'.split(' ')
	
	# x97
	# S = '0011257 0121030 0001214 0010027 0113234 0032417 0224542 0023047 0134002 0113116 0001337 0033337 0014127 0134243 0010462 0001057 0032056 0011117 0023147 0024305 0023240 0001407 0002007 0010433 0010207 0113153 0224241 0023417 0224130 0224502 0034251 0002247 0002157 0002337 0034260 0002547 0014227 0011007 0023263 0122547 0131246 0024504 0011467 0011554 0033022 0032237 0033263 0010135 0023225 0001563 0010502 0020060 0020051 0024437 0024540 0033120 0112247 0113144 0121106 0121005 1123201 0002421 0032157 0121115 0134234 0002464 0033030 0010357 0134314 0001143 0010153 0112445 0112547 0010110 0010444 0010144 0011502 0014014 0033516 0112325 1123112 0131212 0134435 0112027 0001507 0023216 0023527 0024037 0024261 0024563 0032065 0001100 0001134 0113212 0023234 0024532 0032507'.split(' ')
	
	# ⇒77
	# S = '0011257 0121030 0001214 0010027 0113234 0023047 0113116 0001337 0033337 0010462 0001057 0032056 0011117 0023147 0024305 0001407 0002007 0010433 0010207 0224502 0034251 0002247 0002157 0002337 0034260 0002547 0011007 0023263 0122547 0131246 0024504 0011467 0011554 0033022 0032237 0033263 0010135 0023225 0001563 0010502 0020060 0020051 0024437 0024540 0033120 0112247 0121106 0121005 1123201 0002421 0032157 0121115 0002464 0033030 0010357 0001143 0010153 0112547 0010110 0010444 0010144 0011502 0014014 0033516 0112325 1123112 0112027 0001507 0023527 0024037 0024261 0024563 0032065 0001100 0001134 0024532 0032507'.split(' ')
	
	# x107:924
	# S = '0011257 0121030 0001214 0010027 0113234 0023047 0113116 0001337 0033337 0010462 0001057 0032056 0011117 0023147 0024305 0001407 0002007 0010433 0010207 0224502 0034251 0002247 0002157 0002337 0034260 0002547 0011007 0023263 0122547 0131246 0024504 0011467 0011554 0033022 0032237 0033263 0010135 0023225 0001563 0010502 0020060 0020051 0024437 0024540 0033120 0112247 0121106 0121005 1123201 0002421 0032157 0121115 0002464 0033030 0010357 0001143 0010153 0112547 0010110 0010444 0010144 0011502 0014014 0033516 0112325 1123112 0112027 0001507 0023527 0024037 0024261 0024563 0032065 0001100 0001134 0024532 0032507 0034225 0113213 0122232 0131212 0131567 0113135 0113126 0113153 0122113 0123101 0024167 0131412 0130336 0023237 0014267 0032302 0002430 0032356 0033540 0033051 0131255 0134310 0023457 0014147 0032454 0024513 0032447 1033315 1033330 0032331'.split(' ')
	
	# ⇒79
	# S = '0011257 0001214 0010027 0113234 0023047 0113116 0010462 0001057 0032056 0011117 0023147 0024305 0001407 0002007 0010433 0010207 0224502 0002157 0002337 0034260 0011007 0023263 0131246 0024504 0011467 0032237 0010135 0023225 0001563 0010502 0020060 0024437 0024540 0033120 0112247 0121106 0121005 1123201 0121115 0002464 0033030 0010357 0001143 0010153 0112547 0010110 0010444 0010144 0011502 0014014 1123112 0112027 0001507 0023527 0024037 0024261 0032065 0001100 0113213 0122232 0131212 0131567 0113135 0113126 0113153 0123101 0024167 0131412 0130336 0023237 0014267 0032356 0131255 0134310 0023457 0014147 0024513 0032447 1033315'.split(' ')
	
	# x107:966
	# S = '0011257 0001214 0010027 0113234 0023047 0113116 0010462 0001057 0032056 0011117 0023147 0024305 0001407 0002007 0010433 0010207 0224502 0002157 0002337 0034260 0011007 0023263 0131246 0024504 0011467 0032237 0010135 0023225 0001563 0010502 0020060 0024437 0024540 0033120 0112247 0121106 0121005 1123201 0121115 0002464 0033030 0010357 0001143 0010153 0112547 0010110 0010444 0010144 0011502 0014014 1123112 0112027 0001507 0023527 0024037 0024261 0032065 0001100 0113213 0122232 0131212 0131567 0113135 0113126 0113153 0123101 0024167 0131412 0130336 0023237 0014267 0032356 0131255 0134310 0023457 0014147 0024513 0032447 1033315 0001223 0002421 0002517 0112467 0121560 0211260 0001327 0024563 0032167 0032302 0002430 0002455 0032517 0034225 0011554 0121363 0121464 0121554 0121030 1033330 0024532 0224001 0034365 0002227 0033540 0034330 0121455 0123110'.split(' ')
		
	# ⇒82
	# S = '0011257 0113234 0023047 0113116 0010462 0001057 0011117 0023147 0024305 0001407 0010207 0224502 0002337 0034260 0011007 0023263 0131246 0011467 0032237 0010135 0023225 0001563 0010502 0020060 0033120 0112247 0121106 0121005 1123201 0002464 0033030 0010357 0010153 0010110 0010444 0011502 0014014 1123112 0001507 0023527 0024261 0032065 0001100 0113213 0122232 0131212 0113135 0113126 0113153 0123101 0024167 0131412 0023237 0014267 0032356 0134310 0023457 0014147 0032447 1033315 0001223 0002421 0112467 0211260 0001327 0024563 0032167 0032302 0002430 0002455 0032517 0034225 0121363 0121464 0121554 0224001 0034365 0002227 0033540 0034330 0121455 0123110'.split(' ')
		
	# x102:1206
	# S = '0011257 0113234 0023047 0113116 0010462 0001057 0011117 0023147 0024305 0001407 0010207 0224502 0002337 0034260 0011007 0023263 0131246 0011467 0032237 0010135 0023225 0001563 0010502 0020060 0033120 0112247 0121106 0121005 1123201 0002464 0033030 0010357 0010153 0010110 0010444 0011502 0014014 1123112 0001507 0023527 0024261 0032065 0001100 0113213 0122232 0131212 0113135 0113126 0113153 0123101 0024167 0131412 0023237 0014267 0032356 0134310 0023457 0014147 0032447 1033315 0001223 0002421 0112467 0211260 0001327 0024563 0032167 0032302 0002430 0002455 0032517 0034225 0121363 0121464 0121554 0224001 0034365 0002227 0033540 0034330 0121455 0123110 0112356 0123156 0001214 0001232 0001243 0001150 0033330 0010160 0020056 0002027 0002107 0002563 0122563 0020015 1123463 0134255 0010057 0011511 0024443 0131401'.split(' ')
	
	# ⇒75
	# S = '0011257 0113234 0023047 0113116 0010462 0001057 0023147 0024305 0010207 0224502 0034260 0011007 0023263 0131246 0011467 0010135 0023225 0001563 0010502 0112247 0121106 1123201 0002464 0033030 0010357 0010153 0010110 0010444 0011502 0014014 0001507 0023527 0024261 0032065 0001100 0113213 0122232 0113135 0113126 0113153 0024167 0131412 0023237 0014267 0023457 0014147 0032447 0001223 0211260 0001327 0032167 0002430 0002455 0032517 0034225 0121363 0121464 0121554 0224001 0033540 0034330 0001214 0001232 0001150 0010160 0020056 0002027 0002563 0122563 0020015 1123463 0134255 0010057 0011511 0024443'.split(' ')
		
	# x90:1614
	# S = '0011257 0113234 0023047 0113116 0010462 0001057 0023147 0024305 0010207 0224502 0034260 0011007 0023263 0131246 0011467 0010135 0023225 0001563 0010502 0112247 0121106 1123201 0002464 0033030 0010357 0010153 0010110 0010444 0011502 0014014 0001507 0023527 0024261 0032065 0001100 0113213 0122232 0113135 0113126 0113153 0024167 0131412 0023237 0014267 0023457 0014147 0032447 0001223 0211260 0001327 0032167 0002430 0002455 0032517 0034225 0121363 0121464 0121554 0224001 0033540 0034330 0001214 0001232 0001150 0010160 0020056 0002027 0002563 0122563 0020015 1123463 0134255 0010057 0011511 0024443 0020006 0001241 0001467 0002421 0112027 0122401 0112517 0123050 0002367 0002507 0002167 0002202 0002214 0002223 0002266'.split(' ')
		
	# ⇒66
	S = '0011257 0113234 0023047 0113116 0010462 0001057 0023147 0024305 0224502 0034260 0011007 0131246 0011467 0010135 0112247 0121106 0002464 0033030 0010357 0010153 0010110 0010444 0011502 0014014 0023527 0024261 0032065 0113213 0122232 0113135 0113126 0024167 0131412 0023457 0014147 0001223 0001327 0002430 0002455 0034225 0121464 0121554 0224001 0033540 0034330 0001214 0001150 0010160 0020056 0002027 0002563 0020015 0134255 0010057 0011511 0024443 0020006 0001241 0002421 0112027 0112517 0002367 0002167 0002202 0002214 0002223'.split(' ')
		
	diagram = Diagram(8, 1)
	
	for addr in S:
		for l in diagram.nodeByAddress[addr].loop.tuple:
			assert diagram.extendLoop(l)

	# choose 'corner' unreachable cycle, if any
	diagram.point() 
	
	show(diagram)
	
	cycle = diagram.pointers[-1]	
	# cycle = diagram.cycleByAddress['003230']
	if not isinstance(cycle, Cycle):
		print("we don't have any unreachable cycles")
		mx = Measurement(diagram)
		mt = mx.find_min_simple()
		print(mx)
		assert len(mt) is 0, "we don't even have any unreachable simples"
		cycle = mx.mc
		
	print("chosen cycle: " + str(cycle))
	P = list(S)
		
	# simply disconnect everything
	for dead_node in cycle.nodes:
		for bro in dead_node.loopBrethren:
			if not bro.cycle.isKernel:
				for n in bro.cycle.nodes:
					if n.loop.extended:
						print("killing node: " + str(n))
						curr_addrs = set(itertools.chain(*[[ln.address for ln in l.nodes] for l in n.loop.tuple]))
						kill_addr = curr_addrs.intersection(S)
						assert len(kill_addr) is 1
						kill_addr = kill_addr.pop()
						if kill_addr in P:
							P.remove(kill_addr)
						print("killed: " + kill_addr)							
	'''
	# find all associated nodes, part of the same tuples as the 'corner' cycle nodes
	all_cycle_tuple_nodes = itertools.chain(*[n.tuple for n in cycle.nodes])

			
	# for each unreachable node
	for dead_node in all_cycle_tuple_nodes:
		# filter for duplicate chains in our node's brothers, that prevent us from extending its loop
		all_chains = [bro.cycle.chain for bro in dead_node.loopBrethren]
		set_chains = set(all_chains)
		dup_chains = list(all_chains)
		for chain in set_chains:
			dup_chains.remove(chain)
		dup_chains = set(dup_chains)
		print("node: {}\nall: {}\nset: {}\ndup: {}\n".format(dead_node, [c.id for c in all_chains], [c.id for c in set_chains], [c.id for c in dup_chains]))
		assert len(dup_chains), 'we ~should~ have at least one duplicate, as the node is unreachable'
			
		# for each bro chained to one of the duplicates
		for bro in dead_node.loopBrethren:
			if bro.cycle.chain in dup_chains:
				# disconnect all extended loops from this cycle, leaving it completely disconnected from the duplicate chain and the rest of the world				
				for n in bro.cycle.nodes:
					if n.loop.extended:
						print("killing node: " + str(n))
						curr_addrs = set(itertools.chain(*[[ln.address for ln in l.nodes] for l in n.loop.tuple]))
						kill_addr = curr_addrs.intersection(S)
						assert len(kill_addr) is 1
						kill_addr = kill_addr.pop()
						if kill_addr in P:
							P.remove(kill_addr)
						print("killed: " + kill_addr)												
		'''			
	print("killed tuples: {} | x{} ⇒{}".format(len(S) - len(P), len(S), len(P)))
	print(" ".join(P))
#	show(diagram)
